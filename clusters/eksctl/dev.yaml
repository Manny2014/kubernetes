# An example of ClusterConfig object using an existing VPC:
--- 
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: knative-1
  region: us-east-1

vpc:
  id: "vpc-95332af3"  # (optional, must match VPC ID used for each subnet below)
  cidr: "172.31.0.0/16"       # (optional, must match CIDR used by the given VPC)
  subnets:
    # must provide 'private' and/or 'public' subnets by availibility zone as shown
    private:
      us-east-1a:
        id: "subnet-1ef51944"
        cidr: "172.31.32.0/20"

      us-east-1b:
        id: "subnet-77113512"
        cidr: "172.31.0.0/20"  # (optional, must match CIDR used by the given subnet)

      us-east-1c:
        id: "subnet-7f20d653"
        cidr: "172.31.64.0/20"   # (optional, must match CIDR used by the given subnet)

    public:
      us-east-1a:
        id: "subnet-1ef51944"
        cidr: "172.31.32.0/20"

      us-east-1b:
        id: "subnet-77113512"
        cidr: "172.31.0.0/20"  # (optional, must match CIDR used by the given subnet)

      us-east-1c:
        id: "subnet-7f20d653"
        cidr: "172.31.64.0/20"

nodeGroups:
  - name: ng-public
    minSize: 5
    maxSize: 20
    instanceType: t3.2xlarge
    ssh: # use existing EC2 key
      publicKeyName: root
    labels:
      nodegroup-type: frontend-workloads
    iam:
      withAddonPolicies:
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
    availabilityZones: ["us-east-1a","us-east-1b","us-east-1c"]
    securityGroups:
      withShared: true
      withLocal: false
      attachIDs: [sg-d8083091]
  - name: ng-public-2
    minSize: 5
    maxSize: 20
    instanceType: t3.2xlarge
    ssh: # use existing EC2 key
      publicKeyName: root
    labels:
      nodegroup-type: frontend-workloads
    iam:
      withAddonPolicies:
        autoScaler: true
        ebs: true
        fsx: true
        efs: true
    availabilityZones: ["us-east-1a","us-east-1b","us-east-1c"]
